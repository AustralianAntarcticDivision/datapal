% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/image_pal.R
\name{image_pal}
\alias{image_pal}
\alias{image_raster}
\alias{image_stars}
\title{Raster data to RGB}
\usage{
image_pal(x, col, ..., breaks = NULL, n = NULL, zlim = NULL)

image_raster(x, col, ..., breaks = NULL, n = NULL, zlim = NULL)

image_stars(x, col, ..., breaks = NULL, n = NULL, zlim = NULL)
}
\arguments{
\item{x}{raster of values (single layer only)}

\item{col}{function to generate colours, or a vector of hex colours}

\item{...}{ignored}

\item{breaks}{optionally used to specify color mapping}

\item{n}{optionally used to specify density of colours from `col` (ignored if `breaks` is set)}

\item{zlim}{numeric range to clamp values to an absolute scale (ignored if `breaks` is set)}
}
\value{
for `image_pal()` a vector of hex colours, for `image_raster` and `image_stars` a raster or stars object with 3 channel RGB (range 0,255)
}
\description{
Map a raster of numeric values to an RGB 3-layer raster brick.
}
\details{
If no `col` is provided, the default image palette is used. The density
can be controlled with `n` and the mapping  with the optional
`breaks`. If `breaks` is included as well as `n`, `n` is ignored.

Please note that this is fairly wasteful thing to do, the overall data is expanded
from a single layer to three - it fills a specific task which is to create
textures for 3D mapping, and this is the only way to do it currently. (Plus
sometimes it's handy for other reasons, creating PNGs etc.).
}
\examples{
library(raster)
im <- image_raster(volcano)
if (requireNamespace("raster", quietly = TRUE)) {
plotRGB(im)
vv <- unique(quantile(volcano, seq(0, 1, length = 12)))
plotRGB(image_raster(volcano, breaks = vv))
plotRGB(image_raster(volcano, breaks = vv[-c(4, 6)], col = gray.colors(9)))
plotRGB(image_raster(volcano, n = 4))
plotRGB(image_raster(volcano, col = grey(seq(0.2, 0.8, by = 0.1))))

plotRGB(image_raster(volcano, col = viridis::magma(24)))
}
library(stars)
x <- st_as_stars(volcano)
if (!requireNamespace("stars", quietly = TRUE)) {
plot(image_stars(x), rgb = 1:3)
plot(image_stars(x, col = gray.colors), rgb = 1:3)
plot(image_stars(x))
plot(image_stars(x, col = rainbow, breaks = c(94, 100, 120, 150, 195)), rgb = 1:3)
}
}
